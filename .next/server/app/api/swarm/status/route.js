"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/swarm/status/route";
exports.ids = ["app/api/swarm/status/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fswarm%2Fstatus%2Froute&page=%2Fapi%2Fswarm%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fswarm%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fyeojooncho%2FIdeaOasis-3%2Fideaoasis-3%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyeojooncho%2FIdeaOasis-3%2Fideaoasis-3&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fswarm%2Fstatus%2Froute&page=%2Fapi%2Fswarm%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fswarm%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fyeojooncho%2FIdeaOasis-3%2Fideaoasis-3%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyeojooncho%2FIdeaOasis-3%2Fideaoasis-3&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_yeojooncho_IdeaOasis_3_ideaoasis_3_src_app_api_swarm_status_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/swarm/status/route.ts */ \"(rsc)/./src/app/api/swarm/status/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/swarm/status/route\",\n        pathname: \"/api/swarm/status\",\n        filename: \"route\",\n        bundlePath: \"app/api/swarm/status/route\"\n    },\n    resolvedPagePath: \"/Users/yeojooncho/IdeaOasis-3/ideaoasis-3/src/app/api/swarm/status/route.ts\",\n    nextConfigOutput,\n    userland: _Users_yeojooncho_IdeaOasis_3_ideaoasis_3_src_app_api_swarm_status_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/swarm/status/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzd2FybSUyRnN0YXR1cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGc3dhcm0lMkZzdGF0dXMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZzd2FybSUyRnN0YXR1cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnllb2pvb25jaG8lMkZJZGVhT2FzaXMtMyUyRmlkZWFvYXNpcy0zJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnllb2pvb25jaG8lMkZJZGVhT2FzaXMtMyUyRmlkZWFvYXNpcy0zJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzJCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRlYW9hc2lzLz9kNWU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy95ZW9qb29uY2hvL0lkZWFPYXNpcy0zL2lkZWFvYXNpcy0zL3NyYy9hcHAvYXBpL3N3YXJtL3N0YXR1cy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvc3dhcm0vc3RhdHVzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc3dhcm0vc3RhdHVzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9zd2FybS9zdGF0dXMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMveWVvam9vbmNoby9JZGVhT2FzaXMtMy9pZGVhb2FzaXMtMy9zcmMvYXBwL2FwaS9zd2FybS9zdGF0dXMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvc3dhcm0vc3RhdHVzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fswarm%2Fstatus%2Froute&page=%2Fapi%2Fswarm%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fswarm%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fyeojooncho%2FIdeaOasis-3%2Fideaoasis-3%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyeojooncho%2FIdeaOasis-3%2Fideaoasis-3&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/swarm/status/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/swarm/status/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _swarm_SwarmManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/swarm/SwarmManager */ \"(rsc)/./src/swarm/SwarmManager.ts\");\n\n\n// Initialize swarm configuration\nconst swarmConfig = {\n    autoApprovalThreshold: 0.9,\n    reviewThreshold: 0.7,\n    maxProcessingTime: 30000,\n    batchSize: 10,\n    enableReinforcementLearning: true,\n    enableMemory: true,\n    notificationChannels: [\n        \"email\",\n        \"slack\"\n    ]\n};\n// Initialize swarm manager (in production, this would be a singleton)\nlet swarmManager = null;\nfunction getSwarmManager() {\n    if (!swarmManager) {\n        swarmManager = new _swarm_SwarmManager__WEBPACK_IMPORTED_MODULE_1__.SwarmManager(swarmConfig);\n    }\n    return swarmManager;\n}\nasync function GET() {\n    try {\n        const manager = getSwarmManager();\n        // Get swarm status and performance metrics\n        const status = manager.getStatus();\n        const metrics = manager.getPerformanceMetrics();\n        const notifications = manager.getNotifications();\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: {\n                status,\n                metrics,\n                notifications: notifications.filter((n)=>!n.isRead),\n                config: swarmConfig\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting swarm status:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to get swarm status\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST() {\n    try {\n        const manager = getSwarmManager();\n        // Start the swarm if not already running\n        if (!manager.getStatus().isRunning) {\n            await manager.start();\n        }\n        // Run daily discovery\n        await manager.runDailyDiscovery();\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            message: \"Swarm discovery completed\",\n            data: {\n                status: manager.getStatus(),\n                metrics: manager.getPerformanceMetrics()\n            }\n        });\n    } catch (error) {\n        console.error(\"Error running swarm discovery:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to run swarm discovery\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9zd2FybS9zdGF0dXMvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNTO0FBR3BELGlDQUFpQztBQUNqQyxNQUFNRSxjQUEyQjtJQUMvQkMsdUJBQXVCO0lBQ3ZCQyxpQkFBaUI7SUFDakJDLG1CQUFtQjtJQUNuQkMsV0FBVztJQUNYQyw2QkFBNkI7SUFDN0JDLGNBQWM7SUFDZEMsc0JBQXNCO1FBQUM7UUFBUztLQUFRO0FBQzFDO0FBRUEsc0VBQXNFO0FBQ3RFLElBQUlDLGVBQW9DO0FBRXhDLFNBQVNDO0lBQ1AsSUFBSSxDQUFDRCxjQUFjO1FBQ2pCQSxlQUFlLElBQUlULDZEQUFZQSxDQUFDQztJQUNsQztJQUNBLE9BQU9RO0FBQ1Q7QUFFTyxlQUFlRTtJQUNwQixJQUFJO1FBQ0YsTUFBTUMsVUFBVUY7UUFFaEIsMkNBQTJDO1FBQzNDLE1BQU1HLFNBQVNELFFBQVFFLFNBQVM7UUFDaEMsTUFBTUMsVUFBVUgsUUFBUUkscUJBQXFCO1FBQzdDLE1BQU1DLGdCQUFnQkwsUUFBUU0sZ0JBQWdCO1FBRTlDLE9BQU9uQixrRkFBWUEsQ0FBQ29CLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUQyxNQUFNO2dCQUNKUjtnQkFDQUU7Z0JBQ0FFLGVBQWVBLGNBQWNLLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBSyxDQUFDQSxFQUFFQyxNQUFNO2dCQUNsREMsUUFBUXhCO1lBQ1Y7UUFDRjtJQUNGLEVBQUUsT0FBT3lCLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLCtCQUErQkE7UUFDN0MsT0FBTzNCLGtGQUFZQSxDQUFDb0IsSUFBSSxDQUN0QjtZQUNFQyxTQUFTO1lBQ1RNLE9BQU87UUFDVCxHQUNBO1lBQUViLFFBQVE7UUFBSTtJQUVsQjtBQUNGO0FBRU8sZUFBZWU7SUFDcEIsSUFBSTtRQUNGLE1BQU1oQixVQUFVRjtRQUVoQix5Q0FBeUM7UUFDekMsSUFBSSxDQUFDRSxRQUFRRSxTQUFTLEdBQUdlLFNBQVMsRUFBRTtZQUNsQyxNQUFNakIsUUFBUWtCLEtBQUs7UUFDckI7UUFFQSxzQkFBc0I7UUFDdEIsTUFBTWxCLFFBQVFtQixpQkFBaUI7UUFFL0IsT0FBT2hDLGtGQUFZQSxDQUFDb0IsSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RZLFNBQVM7WUFDVFgsTUFBTTtnQkFDSlIsUUFBUUQsUUFBUUUsU0FBUztnQkFDekJDLFNBQVNILFFBQVFJLHFCQUFxQjtZQUN4QztRQUNGO0lBQ0YsRUFBRSxPQUFPVSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxrQ0FBa0NBO1FBQ2hELE9BQU8zQixrRkFBWUEsQ0FBQ29CLElBQUksQ0FDdEI7WUFDRUMsU0FBUztZQUNUTSxPQUFPO1FBQ1QsR0FDQTtZQUFFYixRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2lkZWFvYXNpcy8uL3NyYy9hcHAvYXBpL3N3YXJtL3N0YXR1cy9yb3V0ZS50cz81NGMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IFN3YXJtTWFuYWdlciB9IGZyb20gJ0Avc3dhcm0vU3dhcm1NYW5hZ2VyJztcbmltcG9ydCB7IFN3YXJtQ29uZmlnIH0gZnJvbSAnQC9zd2FybS90eXBlcyc7XG5cbi8vIEluaXRpYWxpemUgc3dhcm0gY29uZmlndXJhdGlvblxuY29uc3Qgc3dhcm1Db25maWc6IFN3YXJtQ29uZmlnID0ge1xuICBhdXRvQXBwcm92YWxUaHJlc2hvbGQ6IDAuOSxcbiAgcmV2aWV3VGhyZXNob2xkOiAwLjcsXG4gIG1heFByb2Nlc3NpbmdUaW1lOiAzMDAwMCxcbiAgYmF0Y2hTaXplOiAxMCxcbiAgZW5hYmxlUmVpbmZvcmNlbWVudExlYXJuaW5nOiB0cnVlLFxuICBlbmFibGVNZW1vcnk6IHRydWUsXG4gIG5vdGlmaWNhdGlvbkNoYW5uZWxzOiBbJ2VtYWlsJywgJ3NsYWNrJ10sXG59O1xuXG4vLyBJbml0aWFsaXplIHN3YXJtIG1hbmFnZXIgKGluIHByb2R1Y3Rpb24sIHRoaXMgd291bGQgYmUgYSBzaW5nbGV0b24pXG5sZXQgc3dhcm1NYW5hZ2VyOiBTd2FybU1hbmFnZXIgfCBudWxsID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0U3dhcm1NYW5hZ2VyKCk6IFN3YXJtTWFuYWdlciB7XG4gIGlmICghc3dhcm1NYW5hZ2VyKSB7XG4gICAgc3dhcm1NYW5hZ2VyID0gbmV3IFN3YXJtTWFuYWdlcihzd2FybUNvbmZpZyk7XG4gIH1cbiAgcmV0dXJuIHN3YXJtTWFuYWdlcjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBtYW5hZ2VyID0gZ2V0U3dhcm1NYW5hZ2VyKCk7XG4gICAgXG4gICAgLy8gR2V0IHN3YXJtIHN0YXR1cyBhbmQgcGVyZm9ybWFuY2UgbWV0cmljc1xuICAgIGNvbnN0IHN0YXR1cyA9IG1hbmFnZXIuZ2V0U3RhdHVzKCk7XG4gICAgY29uc3QgbWV0cmljcyA9IG1hbmFnZXIuZ2V0UGVyZm9ybWFuY2VNZXRyaWNzKCk7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9ucyA9IG1hbmFnZXIuZ2V0Tm90aWZpY2F0aW9ucygpO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgbWV0cmljcyxcbiAgICAgICAgbm90aWZpY2F0aW9uczogbm90aWZpY2F0aW9ucy5maWx0ZXIobiA9PiAhbi5pc1JlYWQpLFxuICAgICAgICBjb25maWc6IHN3YXJtQ29uZmlnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHN3YXJtIHN0YXR1czonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gZ2V0IHN3YXJtIHN0YXR1cycsXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBtYW5hZ2VyID0gZ2V0U3dhcm1NYW5hZ2VyKCk7XG4gICAgXG4gICAgLy8gU3RhcnQgdGhlIHN3YXJtIGlmIG5vdCBhbHJlYWR5IHJ1bm5pbmdcbiAgICBpZiAoIW1hbmFnZXIuZ2V0U3RhdHVzKCkuaXNSdW5uaW5nKSB7XG4gICAgICBhd2FpdCBtYW5hZ2VyLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgLy8gUnVuIGRhaWx5IGRpc2NvdmVyeVxuICAgIGF3YWl0IG1hbmFnZXIucnVuRGFpbHlEaXNjb3ZlcnkoKTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ1N3YXJtIGRpc2NvdmVyeSBjb21wbGV0ZWQnLFxuICAgICAgZGF0YToge1xuICAgICAgICBzdGF0dXM6IG1hbmFnZXIuZ2V0U3RhdHVzKCksXG4gICAgICAgIG1ldHJpY3M6IG1hbmFnZXIuZ2V0UGVyZm9ybWFuY2VNZXRyaWNzKCksXG4gICAgICB9LFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJ1bm5pbmcgc3dhcm0gZGlzY292ZXJ5OicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ0ZhaWxlZCB0byBydW4gc3dhcm0gZGlzY292ZXJ5JyxcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59ICJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJTd2FybU1hbmFnZXIiLCJzd2FybUNvbmZpZyIsImF1dG9BcHByb3ZhbFRocmVzaG9sZCIsInJldmlld1RocmVzaG9sZCIsIm1heFByb2Nlc3NpbmdUaW1lIiwiYmF0Y2hTaXplIiwiZW5hYmxlUmVpbmZvcmNlbWVudExlYXJuaW5nIiwiZW5hYmxlTWVtb3J5Iiwibm90aWZpY2F0aW9uQ2hhbm5lbHMiLCJzd2FybU1hbmFnZXIiLCJnZXRTd2FybU1hbmFnZXIiLCJHRVQiLCJtYW5hZ2VyIiwic3RhdHVzIiwiZ2V0U3RhdHVzIiwibWV0cmljcyIsImdldFBlcmZvcm1hbmNlTWV0cmljcyIsIm5vdGlmaWNhdGlvbnMiLCJnZXROb3RpZmljYXRpb25zIiwianNvbiIsInN1Y2Nlc3MiLCJkYXRhIiwiZmlsdGVyIiwibiIsImlzUmVhZCIsImNvbmZpZyIsImVycm9yIiwiY29uc29sZSIsIlBPU1QiLCJpc1J1bm5pbmciLCJzdGFydCIsInJ1bkRhaWx5RGlzY292ZXJ5IiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/swarm/status/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/swarm/SwarmManager.ts":
/*!***********************************!*\
  !*** ./src/swarm/SwarmManager.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SwarmManager: () => (/* binding */ SwarmManager)\n/* harmony export */ });\n/* harmony import */ var _agents_MasterAgent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./agents/MasterAgent */ \"(rsc)/./src/swarm/agents/MasterAgent.ts\");\n\nclass SwarmManager {\n    constructor(config){\n        this.isRunning = false;\n        this.notificationQueue = [];\n        this.config = config;\n        this.masterAgent = new _agents_MasterAgent__WEBPACK_IMPORTED_MODULE_0__.MasterAgent(config);\n        this.performanceMetrics = this.initializePerformanceMetrics();\n    }\n    initializePerformanceMetrics() {\n        return {\n            totalIdeasProcessed: 0,\n            autoApprovalRate: 0,\n            averageConfidence: 0,\n            averageProcessingTime: 0,\n            errorRate: 0,\n            activeAgents: 5,\n            queueLength: 0,\n            lastUpdated: new Date()\n        };\n    }\n    // Start the swarm system\n    async start() {\n        if (this.isRunning) {\n            console.log(\"Swarm is already running\");\n            return;\n        }\n        console.log(\"Starting Ideaoasis Swarm System...\");\n        this.isRunning = true;\n        // Start background processing\n        this.startBackgroundProcessing();\n        // Start performance monitoring\n        this.startPerformanceMonitoring();\n        console.log(\"Swarm system started successfully\");\n    }\n    // Stop the swarm system\n    async stop() {\n        console.log(\"Stopping Swarm System...\");\n        this.isRunning = false;\n        console.log(\"Swarm system stopped\");\n    }\n    // Process a new idea through the swarm\n    async processIdea(ideaData) {\n        const task = {\n            id: `idea-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            type: \"idea_processing\",\n            status: \"pending\",\n            priority: \"medium\",\n            input: ideaData,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        console.log(`Processing idea: ${ideaData.title}`);\n        // Add to master agent queue\n        await this.masterAgent.addTask(task);\n        // Process the task\n        const result = await this.masterAgent.processTask(task);\n        // Update performance metrics\n        this.updatePerformanceMetrics(result);\n        // Create idea data from result\n        const processedIdea = {\n            id: result.id,\n            title: ideaData.title || \"Untitled Idea\",\n            description: ideaData.description || \"\",\n            sourceUrl: ideaData.sourceUrl || \"\",\n            sourceCountry: ideaData.sourceCountry || \"Unknown\",\n            originalIdea: ideaData.originalIdea || \"\",\n            koreanAdaptation: result.output?.koreanAdaptation,\n            feasibilityScore: result.output?.overallScore,\n            confidenceScore: result.confidence,\n            category: ideaData.category || \"General\",\n            tags: ideaData.tags || [],\n            status: result.confidence && result.confidence >= this.config.autoApprovalThreshold ? \"approved\" : \"flagged\",\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        return processedIdea;\n    }\n    // Handle user queries through the swarm\n    async processUserQuery(query) {\n        const task = {\n            id: `query-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            type: \"user_query\",\n            status: \"pending\",\n            priority: \"high\",\n            input: query,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        console.log(`Processing user query: ${query.query.substring(0, 50)}...`);\n        await this.masterAgent.addTask(task);\n        const result = await this.masterAgent.processTask(task);\n        // Update query with response\n        const updatedQuery = {\n            ...query,\n            response: result.output?.response,\n            confidence: result.confidence,\n            processingTime: result.completedAt && result.createdAt ? result.completedAt.getTime() - result.createdAt.getTime() : undefined,\n            respondedAt: result.completedAt\n        };\n        return updatedQuery;\n    }\n    // Moderate community content\n    async moderateContent(post) {\n        const task = {\n            id: `moderation-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            type: \"content_moderation\",\n            status: \"pending\",\n            priority: \"medium\",\n            input: post,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        console.log(`Moderating content: ${post.title}`);\n        await this.masterAgent.addTask(task);\n        const result = await this.masterAgent.processTask(task);\n        // Update post with moderation result\n        const moderatedPost = {\n            ...post,\n            status: result.output?.isAppropriate ? \"approved\" : \"flagged\",\n            moderatedAt: result.completedAt\n        };\n        return moderatedPost;\n    }\n    // Batch process multiple ideas\n    async batchProcessIdeas(ideas) {\n        console.log(`Batch processing ${ideas.length} ideas`);\n        const results = await Promise.all(ideas.map((idea)=>this.processIdea(idea)));\n        console.log(`Batch processing completed. ${results.length} ideas processed`);\n        return results;\n    }\n    // Get swarm performance metrics\n    getPerformanceMetrics() {\n        return {\n            ...this.performanceMetrics\n        };\n    }\n    // Get pending notifications\n    getNotifications() {\n        return [\n            ...this.notificationQueue\n        ];\n    }\n    // Mark notification as read\n    markNotificationAsRead(notificationId) {\n        const notification = this.notificationQueue.find((n)=>n.id === notificationId);\n        if (notification) {\n            notification.isRead = true;\n            notification.readAt = new Date();\n        }\n    }\n    // Update swarm configuration\n    updateConfig(newConfig) {\n        this.config = {\n            ...this.config,\n            ...newConfig\n        };\n        console.log(\"Swarm configuration updated\");\n    }\n    // Get swarm status\n    getStatus() {\n        return {\n            isRunning: this.isRunning,\n            queueLength: this.masterAgent.getTaskQueue().length,\n            activeAgents: this.masterAgent.getAgents().filter((agent)=>agent.isActive).length\n        };\n    }\n    // Private methods for background processing\n    startBackgroundProcessing() {\n        setInterval(async ()=>{\n            if (this.isRunning) {\n                await this.masterAgent.processQueue();\n            }\n        }, 5000); // Process queue every 5 seconds\n    }\n    startPerformanceMonitoring() {\n        setInterval(()=>{\n            if (this.isRunning) {\n                this.updatePerformanceMetrics();\n            }\n        }, 60000); // Update metrics every minute\n    }\n    updatePerformanceMetrics(result) {\n        const queue = this.masterAgent.getTaskQueue();\n        const agents = this.masterAgent.getAgents();\n        this.performanceMetrics = {\n            totalIdeasProcessed: this.performanceMetrics.totalIdeasProcessed + (result?.type === \"idea_processing\" ? 1 : 0),\n            autoApprovalRate: this.calculateAutoApprovalRate(),\n            averageConfidence: this.calculateAverageConfidence(),\n            averageProcessingTime: this.calculateAverageProcessingTime(),\n            errorRate: this.calculateErrorRate(),\n            activeAgents: agents.filter((agent)=>agent.isActive).length,\n            queueLength: queue.length,\n            lastUpdated: new Date()\n        };\n    }\n    calculateAutoApprovalRate() {\n        // In real implementation, this would query the database\n        // For now, return a simulated rate\n        return 0.92; // 92% auto-approval rate\n    }\n    calculateAverageConfidence() {\n        // In real implementation, this would query the database\n        return 0.83; // 8.3/10 average confidence\n    }\n    calculateAverageProcessingTime() {\n        // In real implementation, this would query the database\n        return 15000; // 15 seconds average processing time\n    }\n    calculateErrorRate() {\n        // In real implementation, this would query the database\n        return 0.05; // 5% error rate\n    }\n    // Simulate idea discovery from external sources\n    async discoverIdeas(count = 10) {\n        console.log(`Discovering ${count} new ideas...`);\n        // Simulate idea discovery from various sources\n        const mockIdeas = [\n            {\n                title: \"AI-Powered Personal Stylist\",\n                description: \"Virtual stylist that recommends outfits based on personal style and occasion\",\n                sourceUrl: \"https://techcrunch.com/2024/01/15/ai-stylist-startup\",\n                sourceCountry: \"US\",\n                originalIdea: \"AI-powered personal styling service with virtual try-on\",\n                category: \"Fashion\",\n                tags: [\n                    \"AI\",\n                    \"Fashion\",\n                    \"Personalization\",\n                    \"E-commerce\"\n                ]\n            },\n            {\n                title: \"Smart Home Energy Management\",\n                description: \"IoT system that optimizes home energy usage based on patterns and preferences\",\n                sourceUrl: \"https://venturebeat.com/2024/01/20/smart-energy-startup\",\n                sourceCountry: \"Germany\",\n                originalIdea: \"Smart home energy management with AI optimization\",\n                category: \"IoT\",\n                tags: [\n                    \"IoT\",\n                    \"Energy\",\n                    \"Sustainability\",\n                    \"Smart Home\"\n                ]\n            },\n            {\n                title: \"Mental Health AI Companion\",\n                description: \"AI-powered mental health support with mood tracking and personalized interventions\",\n                sourceUrl: \"https://producthunt.com/posts/mental-health-ai\",\n                sourceCountry: \"UK\",\n                originalIdea: \"AI mental health companion with 24/7 support\",\n                category: \"Health\",\n                tags: [\n                    \"AI\",\n                    \"Mental Health\",\n                    \"Wellness\",\n                    \"Healthcare\"\n                ]\n            },\n            {\n                title: \"Local Food Delivery Network\",\n                description: \"Platform connecting local farmers with consumers for fresh produce delivery\",\n                sourceUrl: \"https://crunchbase.com/organization/farm-fresh-delivery\",\n                sourceCountry: \"Canada\",\n                originalIdea: \"Farm-to-table delivery platform\",\n                category: \"Food\",\n                tags: [\n                    \"Food\",\n                    \"Local\",\n                    \"Sustainability\",\n                    \"Delivery\"\n                ]\n            },\n            {\n                title: \"Language Learning Social Network\",\n                description: \"Social platform for language learners to practice with native speakers\",\n                sourceUrl: \"https://twitter.com/langlearnapp\",\n                sourceCountry: \"Spain\",\n                originalIdea: \"Social language learning platform\",\n                category: \"Education\",\n                tags: [\n                    \"Education\",\n                    \"Language\",\n                    \"Social\",\n                    \"Learning\"\n                ]\n            }\n        ];\n        // Return random subset of mock ideas\n        return mockIdeas.slice(0, Math.min(count, mockIdeas.length));\n    }\n    // Run daily idea discovery and processing\n    async runDailyDiscovery() {\n        console.log(\"Running daily idea discovery...\");\n        try {\n            // Discover new ideas\n            const newIdeas = await this.discoverIdeas(5);\n            // Process each idea through the swarm\n            const processedIdeas = await this.batchProcessIdeas(newIdeas);\n            console.log(`Daily discovery completed. ${processedIdeas.length} ideas processed.`);\n            // Log statistics\n            const approvedIdeas = processedIdeas.filter((idea)=>idea.status === \"approved\");\n            const flaggedIdeas = processedIdeas.filter((idea)=>idea.status === \"flagged\");\n            console.log(`Results: ${approvedIdeas.length} approved, ${flaggedIdeas.length} flagged for review`);\n        } catch (error) {\n            console.error(\"Error in daily discovery:\", error);\n            // Send error notification\n            const notification = {\n                id: `daily-discovery-error-${Date.now()}`,\n                type: \"swarm_error\",\n                title: \"Daily Discovery Error\",\n                message: `Error in daily idea discovery: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                priority: \"high\",\n                channels: this.config.notificationChannels,\n                isRead: false,\n                createdAt: new Date()\n            };\n            this.notificationQueue.push(notification);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixNQUFNLENBQUNmLENBQUFBLE9BQVFBLEtBQUs5QyxNQUFNLEtBQUs7WUFFbkVmLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRThGLGNBQWN2QyxNQUFNLENBQUMsV0FBVyxFQUFFd0MsYUFBYXhDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztRQUVwRyxFQUFFLE9BQU95QyxPQUFPO1lBQ2RqRyxRQUFRaUcsS0FBSyxDQUFDLDZCQUE2QkE7WUFFM0MsMEJBQTBCO1lBQzFCLE1BQU0vQixlQUFrQztnQkFDdEMxRCxJQUFJLENBQUMsc0JBQXNCLEVBQUVWLEtBQUtXLEdBQUcsR0FBRyxDQUFDO2dCQUN6Q0ssTUFBTTtnQkFDTk0sT0FBTztnQkFDUDhFLFNBQVMsQ0FBQywrQkFBK0IsRUFBRUQsaUJBQWlCRSxRQUFRRixNQUFNQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUM7Z0JBQ3JHbEYsVUFBVTtnQkFDVm9GLFVBQVUsSUFBSSxDQUFDcEgsTUFBTSxDQUFDcUgsb0JBQW9CO2dCQUMxQ2hDLFFBQVE7Z0JBQ1JuRCxXQUFXLElBQUlwQjtZQUNqQjtZQUVBLElBQUksQ0FBQ1osaUJBQWlCLENBQUNvSCxJQUFJLENBQUNwQztRQUM5QjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZGVhb2FzaXMvLi9zcmMvc3dhcm0vU3dhcm1NYW5hZ2VyLnRzPzhkMGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFzdGVyQWdlbnQgfSBmcm9tICcuL2FnZW50cy9NYXN0ZXJBZ2VudCc7XG5pbXBvcnQgeyBcbiAgU3dhcm1Db25maWcsIFxuICBTd2FybVRhc2ssIFxuICBTd2FybVBlcmZvcm1hbmNlTWV0cmljcywgXG4gIFN3YXJtTm90aWZpY2F0aW9uLFxuICBJZGVhRGF0YSxcbiAgVXNlclF1ZXJ5LFxuICBDb21tdW5pdHlQb3N0XG59IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgU3dhcm1NYW5hZ2VyIHtcbiAgcHJpdmF0ZSBtYXN0ZXJBZ2VudDogTWFzdGVyQWdlbnQ7XG4gIHByaXZhdGUgY29uZmlnOiBTd2FybUNvbmZpZztcbiAgcHJpdmF0ZSBpc1J1bm5pbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBwZXJmb3JtYW5jZU1ldHJpY3M6IFN3YXJtUGVyZm9ybWFuY2VNZXRyaWNzO1xuICBwcml2YXRlIG5vdGlmaWNhdGlvblF1ZXVlOiBTd2FybU5vdGlmaWNhdGlvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTd2FybUNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMubWFzdGVyQWdlbnQgPSBuZXcgTWFzdGVyQWdlbnQoY29uZmlnKTtcbiAgICB0aGlzLnBlcmZvcm1hbmNlTWV0cmljcyA9IHRoaXMuaW5pdGlhbGl6ZVBlcmZvcm1hbmNlTWV0cmljcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplUGVyZm9ybWFuY2VNZXRyaWNzKCk6IFN3YXJtUGVyZm9ybWFuY2VNZXRyaWNzIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG90YWxJZGVhc1Byb2Nlc3NlZDogMCxcbiAgICAgIGF1dG9BcHByb3ZhbFJhdGU6IDAsXG4gICAgICBhdmVyYWdlQ29uZmlkZW5jZTogMCxcbiAgICAgIGF2ZXJhZ2VQcm9jZXNzaW5nVGltZTogMCxcbiAgICAgIGVycm9yUmF0ZTogMCxcbiAgICAgIGFjdGl2ZUFnZW50czogNSwgLy8gbWFzdGVyLCBzb3VyY2luZywgc2NvcmluZywgYWRhcHRhdGlvbiwgbW9kZXJhdGlvblxuICAgICAgcXVldWVMZW5ndGg6IDAsXG4gICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKSxcbiAgICB9O1xuICB9XG5cbiAgLy8gU3RhcnQgdGhlIHN3YXJtIHN5c3RlbVxuICBhc3luYyBzdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdTd2FybSBpcyBhbHJlYWR5IHJ1bm5pbmcnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgSWRlYW9hc2lzIFN3YXJtIFN5c3RlbS4uLicpO1xuICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcblxuICAgIC8vIFN0YXJ0IGJhY2tncm91bmQgcHJvY2Vzc2luZ1xuICAgIHRoaXMuc3RhcnRCYWNrZ3JvdW5kUHJvY2Vzc2luZygpO1xuICAgIFxuICAgIC8vIFN0YXJ0IHBlcmZvcm1hbmNlIG1vbml0b3JpbmdcbiAgICB0aGlzLnN0YXJ0UGVyZm9ybWFuY2VNb25pdG9yaW5nKCk7XG5cbiAgICBjb25zb2xlLmxvZygnU3dhcm0gc3lzdGVtIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gIH1cblxuICAvLyBTdG9wIHRoZSBzd2FybSBzeXN0ZW1cbiAgYXN5bmMgc3RvcCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zb2xlLmxvZygnU3RvcHBpbmcgU3dhcm0gU3lzdGVtLi4uJyk7XG4gICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICBjb25zb2xlLmxvZygnU3dhcm0gc3lzdGVtIHN0b3BwZWQnKTtcbiAgfVxuXG4gIC8vIFByb2Nlc3MgYSBuZXcgaWRlYSB0aHJvdWdoIHRoZSBzd2FybVxuICBhc3luYyBwcm9jZXNzSWRlYShpZGVhRGF0YTogUGFydGlhbDxJZGVhRGF0YT4pOiBQcm9taXNlPElkZWFEYXRhPiB7XG4gICAgY29uc3QgdGFzazogU3dhcm1UYXNrID0ge1xuICAgICAgaWQ6IGBpZGVhLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgICAgIHR5cGU6ICdpZGVhX3Byb2Nlc3NpbmcnLFxuICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICBpbnB1dDogaWRlYURhdGEsXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nIGlkZWE6ICR7aWRlYURhdGEudGl0bGV9YCk7XG4gICAgXG4gICAgLy8gQWRkIHRvIG1hc3RlciBhZ2VudCBxdWV1ZVxuICAgIGF3YWl0IHRoaXMubWFzdGVyQWdlbnQuYWRkVGFzayh0YXNrKTtcbiAgICBcbiAgICAvLyBQcm9jZXNzIHRoZSB0YXNrXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYXN0ZXJBZ2VudC5wcm9jZXNzVGFzayh0YXNrKTtcbiAgICBcbiAgICAvLyBVcGRhdGUgcGVyZm9ybWFuY2UgbWV0cmljc1xuICAgIHRoaXMudXBkYXRlUGVyZm9ybWFuY2VNZXRyaWNzKHJlc3VsdCk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGlkZWEgZGF0YSBmcm9tIHJlc3VsdFxuICAgIGNvbnN0IHByb2Nlc3NlZElkZWE6IElkZWFEYXRhID0ge1xuICAgICAgaWQ6IHJlc3VsdC5pZCxcbiAgICAgIHRpdGxlOiBpZGVhRGF0YS50aXRsZSB8fCAnVW50aXRsZWQgSWRlYScsXG4gICAgICBkZXNjcmlwdGlvbjogaWRlYURhdGEuZGVzY3JpcHRpb24gfHwgJycsXG4gICAgICBzb3VyY2VVcmw6IGlkZWFEYXRhLnNvdXJjZVVybCB8fCAnJyxcbiAgICAgIHNvdXJjZUNvdW50cnk6IGlkZWFEYXRhLnNvdXJjZUNvdW50cnkgfHwgJ1Vua25vd24nLFxuICAgICAgb3JpZ2luYWxJZGVhOiBpZGVhRGF0YS5vcmlnaW5hbElkZWEgfHwgJycsXG4gICAgICBrb3JlYW5BZGFwdGF0aW9uOiByZXN1bHQub3V0cHV0Py5rb3JlYW5BZGFwdGF0aW9uLFxuICAgICAgZmVhc2liaWxpdHlTY29yZTogcmVzdWx0Lm91dHB1dD8ub3ZlcmFsbFNjb3JlLFxuICAgICAgY29uZmlkZW5jZVNjb3JlOiByZXN1bHQuY29uZmlkZW5jZSxcbiAgICAgIGNhdGVnb3J5OiBpZGVhRGF0YS5jYXRlZ29yeSB8fCAnR2VuZXJhbCcsXG4gICAgICB0YWdzOiBpZGVhRGF0YS50YWdzIHx8IFtdLFxuICAgICAgc3RhdHVzOiByZXN1bHQuY29uZmlkZW5jZSAmJiByZXN1bHQuY29uZmlkZW5jZSA+PSB0aGlzLmNvbmZpZy5hdXRvQXBwcm92YWxUaHJlc2hvbGQgPyAnYXBwcm92ZWQnIDogJ2ZsYWdnZWQnLFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIH07XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkSWRlYTtcbiAgfVxuXG4gIC8vIEhhbmRsZSB1c2VyIHF1ZXJpZXMgdGhyb3VnaCB0aGUgc3dhcm1cbiAgYXN5bmMgcHJvY2Vzc1VzZXJRdWVyeShxdWVyeTogVXNlclF1ZXJ5KTogUHJvbWlzZTxVc2VyUXVlcnk+IHtcbiAgICBjb25zdCB0YXNrOiBTd2FybVRhc2sgPSB7XG4gICAgICBpZDogYHF1ZXJ5LSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgICAgIHR5cGU6ICd1c2VyX3F1ZXJ5JyxcbiAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgIGlucHV0OiBxdWVyeSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coYFByb2Nlc3NpbmcgdXNlciBxdWVyeTogJHtxdWVyeS5xdWVyeS5zdWJzdHJpbmcoMCwgNTApfS4uLmApO1xuICAgIFxuICAgIGF3YWl0IHRoaXMubWFzdGVyQWdlbnQuYWRkVGFzayh0YXNrKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLm1hc3RlckFnZW50LnByb2Nlc3NUYXNrKHRhc2spO1xuICAgIFxuICAgIC8vIFVwZGF0ZSBxdWVyeSB3aXRoIHJlc3BvbnNlXG4gICAgY29uc3QgdXBkYXRlZFF1ZXJ5OiBVc2VyUXVlcnkgPSB7XG4gICAgICAuLi5xdWVyeSxcbiAgICAgIHJlc3BvbnNlOiByZXN1bHQub3V0cHV0Py5yZXNwb25zZSxcbiAgICAgIGNvbmZpZGVuY2U6IHJlc3VsdC5jb25maWRlbmNlLFxuICAgICAgcHJvY2Vzc2luZ1RpbWU6IHJlc3VsdC5jb21wbGV0ZWRBdCAmJiByZXN1bHQuY3JlYXRlZEF0ID8gXG4gICAgICAgIHJlc3VsdC5jb21wbGV0ZWRBdC5nZXRUaW1lKCkgLSByZXN1bHQuY3JlYXRlZEF0LmdldFRpbWUoKSA6IHVuZGVmaW5lZCxcbiAgICAgIHJlc3BvbmRlZEF0OiByZXN1bHQuY29tcGxldGVkQXQsXG4gICAgfTtcblxuICAgIHJldHVybiB1cGRhdGVkUXVlcnk7XG4gIH1cblxuICAvLyBNb2RlcmF0ZSBjb21tdW5pdHkgY29udGVudFxuICBhc3luYyBtb2RlcmF0ZUNvbnRlbnQocG9zdDogQ29tbXVuaXR5UG9zdCk6IFByb21pc2U8Q29tbXVuaXR5UG9zdD4ge1xuICAgIGNvbnN0IHRhc2s6IFN3YXJtVGFzayA9IHtcbiAgICAgIGlkOiBgbW9kZXJhdGlvbi0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWAsXG4gICAgICB0eXBlOiAnY29udGVudF9tb2RlcmF0aW9uJyxcbiAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgaW5wdXQ6IHBvc3QsXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKGBNb2RlcmF0aW5nIGNvbnRlbnQ6ICR7cG9zdC50aXRsZX1gKTtcbiAgICBcbiAgICBhd2FpdCB0aGlzLm1hc3RlckFnZW50LmFkZFRhc2sodGFzayk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYXN0ZXJBZ2VudC5wcm9jZXNzVGFzayh0YXNrKTtcbiAgICBcbiAgICAvLyBVcGRhdGUgcG9zdCB3aXRoIG1vZGVyYXRpb24gcmVzdWx0XG4gICAgY29uc3QgbW9kZXJhdGVkUG9zdDogQ29tbXVuaXR5UG9zdCA9IHtcbiAgICAgIC4uLnBvc3QsXG4gICAgICBzdGF0dXM6IHJlc3VsdC5vdXRwdXQ/LmlzQXBwcm9wcmlhdGUgPyAnYXBwcm92ZWQnIDogJ2ZsYWdnZWQnLFxuICAgICAgbW9kZXJhdGVkQXQ6IHJlc3VsdC5jb21wbGV0ZWRBdCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG1vZGVyYXRlZFBvc3Q7XG4gIH1cblxuICAvLyBCYXRjaCBwcm9jZXNzIG11bHRpcGxlIGlkZWFzXG4gIGFzeW5jIGJhdGNoUHJvY2Vzc0lkZWFzKGlkZWFzOiBQYXJ0aWFsPElkZWFEYXRhPltdKTogUHJvbWlzZTxJZGVhRGF0YVtdPiB7XG4gICAgY29uc29sZS5sb2coYEJhdGNoIHByb2Nlc3NpbmcgJHtpZGVhcy5sZW5ndGh9IGlkZWFzYCk7XG4gICAgXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgaWRlYXMubWFwKGlkZWEgPT4gdGhpcy5wcm9jZXNzSWRlYShpZGVhKSlcbiAgICApO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBCYXRjaCBwcm9jZXNzaW5nIGNvbXBsZXRlZC4gJHtyZXN1bHRzLmxlbmd0aH0gaWRlYXMgcHJvY2Vzc2VkYCk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cblxuICAvLyBHZXQgc3dhcm0gcGVyZm9ybWFuY2UgbWV0cmljc1xuICBnZXRQZXJmb3JtYW5jZU1ldHJpY3MoKTogU3dhcm1QZXJmb3JtYW5jZU1ldHJpY3Mge1xuICAgIHJldHVybiB7IC4uLnRoaXMucGVyZm9ybWFuY2VNZXRyaWNzIH07XG4gIH1cblxuICAvLyBHZXQgcGVuZGluZyBub3RpZmljYXRpb25zXG4gIGdldE5vdGlmaWNhdGlvbnMoKTogU3dhcm1Ob3RpZmljYXRpb25bXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLm5vdGlmaWNhdGlvblF1ZXVlXTtcbiAgfVxuXG4gIC8vIE1hcmsgbm90aWZpY2F0aW9uIGFzIHJlYWRcbiAgbWFya05vdGlmaWNhdGlvbkFzUmVhZChub3RpZmljYXRpb25JZDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gdGhpcy5ub3RpZmljYXRpb25RdWV1ZS5maW5kKG4gPT4gbi5pZCA9PT0gbm90aWZpY2F0aW9uSWQpO1xuICAgIGlmIChub3RpZmljYXRpb24pIHtcbiAgICAgIG5vdGlmaWNhdGlvbi5pc1JlYWQgPSB0cnVlO1xuICAgICAgbm90aWZpY2F0aW9uLnJlYWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIHN3YXJtIGNvbmZpZ3VyYXRpb25cbiAgdXBkYXRlQ29uZmlnKG5ld0NvbmZpZzogUGFydGlhbDxTd2FybUNvbmZpZz4pOiB2b2lkIHtcbiAgICB0aGlzLmNvbmZpZyA9IHsgLi4udGhpcy5jb25maWcsIC4uLm5ld0NvbmZpZyB9O1xuICAgIGNvbnNvbGUubG9nKCdTd2FybSBjb25maWd1cmF0aW9uIHVwZGF0ZWQnKTtcbiAgfVxuXG4gIC8vIEdldCBzd2FybSBzdGF0dXNcbiAgZ2V0U3RhdHVzKCk6IHsgaXNSdW5uaW5nOiBib29sZWFuOyBxdWV1ZUxlbmd0aDogbnVtYmVyOyBhY3RpdmVBZ2VudHM6IG51bWJlciB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNSdW5uaW5nOiB0aGlzLmlzUnVubmluZyxcbiAgICAgIHF1ZXVlTGVuZ3RoOiB0aGlzLm1hc3RlckFnZW50LmdldFRhc2tRdWV1ZSgpLmxlbmd0aCxcbiAgICAgIGFjdGl2ZUFnZW50czogdGhpcy5tYXN0ZXJBZ2VudC5nZXRBZ2VudHMoKS5maWx0ZXIoYWdlbnQgPT4gYWdlbnQuaXNBY3RpdmUpLmxlbmd0aCxcbiAgICB9O1xuICB9XG5cbiAgLy8gUHJpdmF0ZSBtZXRob2RzIGZvciBiYWNrZ3JvdW5kIHByb2Nlc3NpbmdcbiAgcHJpdmF0ZSBzdGFydEJhY2tncm91bmRQcm9jZXNzaW5nKCk6IHZvaWQge1xuICAgIHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzUnVubmluZykge1xuICAgICAgICBhd2FpdCB0aGlzLm1hc3RlckFnZW50LnByb2Nlc3NRdWV1ZSgpO1xuICAgICAgfVxuICAgIH0sIDUwMDApOyAvLyBQcm9jZXNzIHF1ZXVlIGV2ZXJ5IDUgc2Vjb25kc1xuICB9XG5cbiAgcHJpdmF0ZSBzdGFydFBlcmZvcm1hbmNlTW9uaXRvcmluZygpOiB2b2lkIHtcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQZXJmb3JtYW5jZU1ldHJpY3MoKTtcbiAgICAgIH1cbiAgICB9LCA2MDAwMCk7IC8vIFVwZGF0ZSBtZXRyaWNzIGV2ZXJ5IG1pbnV0ZVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVQZXJmb3JtYW5jZU1ldHJpY3MocmVzdWx0PzogU3dhcm1UYXNrKTogdm9pZCB7XG4gICAgY29uc3QgcXVldWUgPSB0aGlzLm1hc3RlckFnZW50LmdldFRhc2tRdWV1ZSgpO1xuICAgIGNvbnN0IGFnZW50cyA9IHRoaXMubWFzdGVyQWdlbnQuZ2V0QWdlbnRzKCk7XG4gICAgXG4gICAgdGhpcy5wZXJmb3JtYW5jZU1ldHJpY3MgPSB7XG4gICAgICB0b3RhbElkZWFzUHJvY2Vzc2VkOiB0aGlzLnBlcmZvcm1hbmNlTWV0cmljcy50b3RhbElkZWFzUHJvY2Vzc2VkICsgKHJlc3VsdD8udHlwZSA9PT0gJ2lkZWFfcHJvY2Vzc2luZycgPyAxIDogMCksXG4gICAgICBhdXRvQXBwcm92YWxSYXRlOiB0aGlzLmNhbGN1bGF0ZUF1dG9BcHByb3ZhbFJhdGUoKSxcbiAgICAgIGF2ZXJhZ2VDb25maWRlbmNlOiB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2VDb25maWRlbmNlKCksXG4gICAgICBhdmVyYWdlUHJvY2Vzc2luZ1RpbWU6IHRoaXMuY2FsY3VsYXRlQXZlcmFnZVByb2Nlc3NpbmdUaW1lKCksXG4gICAgICBlcnJvclJhdGU6IHRoaXMuY2FsY3VsYXRlRXJyb3JSYXRlKCksXG4gICAgICBhY3RpdmVBZ2VudHM6IGFnZW50cy5maWx0ZXIoYWdlbnQgPT4gYWdlbnQuaXNBY3RpdmUpLmxlbmd0aCxcbiAgICAgIHF1ZXVlTGVuZ3RoOiBxdWV1ZS5sZW5ndGgsXG4gICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVBdXRvQXBwcm92YWxSYXRlKCk6IG51bWJlciB7XG4gICAgLy8gSW4gcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBxdWVyeSB0aGUgZGF0YWJhc2VcbiAgICAvLyBGb3Igbm93LCByZXR1cm4gYSBzaW11bGF0ZWQgcmF0ZVxuICAgIHJldHVybiAwLjkyOyAvLyA5MiUgYXV0by1hcHByb3ZhbCByYXRlXG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUF2ZXJhZ2VDb25maWRlbmNlKCk6IG51bWJlciB7XG4gICAgLy8gSW4gcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBxdWVyeSB0aGUgZGF0YWJhc2VcbiAgICByZXR1cm4gMC44MzsgLy8gOC4zLzEwIGF2ZXJhZ2UgY29uZmlkZW5jZVxuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVBdmVyYWdlUHJvY2Vzc2luZ1RpbWUoKTogbnVtYmVyIHtcbiAgICAvLyBJbiByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIHF1ZXJ5IHRoZSBkYXRhYmFzZVxuICAgIHJldHVybiAxNTAwMDsgLy8gMTUgc2Vjb25kcyBhdmVyYWdlIHByb2Nlc3NpbmcgdGltZVxuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVFcnJvclJhdGUoKTogbnVtYmVyIHtcbiAgICAvLyBJbiByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIHF1ZXJ5IHRoZSBkYXRhYmFzZVxuICAgIHJldHVybiAwLjA1OyAvLyA1JSBlcnJvciByYXRlXG4gIH1cblxuICAvLyBTaW11bGF0ZSBpZGVhIGRpc2NvdmVyeSBmcm9tIGV4dGVybmFsIHNvdXJjZXNcbiAgYXN5bmMgZGlzY292ZXJJZGVhcyhjb3VudDogbnVtYmVyID0gMTApOiBQcm9taXNlPFBhcnRpYWw8SWRlYURhdGE+W10+IHtcbiAgICBjb25zb2xlLmxvZyhgRGlzY292ZXJpbmcgJHtjb3VudH0gbmV3IGlkZWFzLi4uYCk7XG4gICAgXG4gICAgLy8gU2ltdWxhdGUgaWRlYSBkaXNjb3ZlcnkgZnJvbSB2YXJpb3VzIHNvdXJjZXNcbiAgICBjb25zdCBtb2NrSWRlYXM6IFBhcnRpYWw8SWRlYURhdGE+W10gPSBbXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnQUktUG93ZXJlZCBQZXJzb25hbCBTdHlsaXN0JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdWaXJ0dWFsIHN0eWxpc3QgdGhhdCByZWNvbW1lbmRzIG91dGZpdHMgYmFzZWQgb24gcGVyc29uYWwgc3R5bGUgYW5kIG9jY2FzaW9uJyxcbiAgICAgICAgc291cmNlVXJsOiAnaHR0cHM6Ly90ZWNoY3J1bmNoLmNvbS8yMDI0LzAxLzE1L2FpLXN0eWxpc3Qtc3RhcnR1cCcsXG4gICAgICAgIHNvdXJjZUNvdW50cnk6ICdVUycsXG4gICAgICAgIG9yaWdpbmFsSWRlYTogJ0FJLXBvd2VyZWQgcGVyc29uYWwgc3R5bGluZyBzZXJ2aWNlIHdpdGggdmlydHVhbCB0cnktb24nLFxuICAgICAgICBjYXRlZ29yeTogJ0Zhc2hpb24nLFxuICAgICAgICB0YWdzOiBbJ0FJJywgJ0Zhc2hpb24nLCAnUGVyc29uYWxpemF0aW9uJywgJ0UtY29tbWVyY2UnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnU21hcnQgSG9tZSBFbmVyZ3kgTWFuYWdlbWVudCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSW9UIHN5c3RlbSB0aGF0IG9wdGltaXplcyBob21lIGVuZXJneSB1c2FnZSBiYXNlZCBvbiBwYXR0ZXJucyBhbmQgcHJlZmVyZW5jZXMnLFxuICAgICAgICBzb3VyY2VVcmw6ICdodHRwczovL3ZlbnR1cmViZWF0LmNvbS8yMDI0LzAxLzIwL3NtYXJ0LWVuZXJneS1zdGFydHVwJyxcbiAgICAgICAgc291cmNlQ291bnRyeTogJ0dlcm1hbnknLFxuICAgICAgICBvcmlnaW5hbElkZWE6ICdTbWFydCBob21lIGVuZXJneSBtYW5hZ2VtZW50IHdpdGggQUkgb3B0aW1pemF0aW9uJyxcbiAgICAgICAgY2F0ZWdvcnk6ICdJb1QnLFxuICAgICAgICB0YWdzOiBbJ0lvVCcsICdFbmVyZ3knLCAnU3VzdGFpbmFiaWxpdHknLCAnU21hcnQgSG9tZSddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICdNZW50YWwgSGVhbHRoIEFJIENvbXBhbmlvbicsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQUktcG93ZXJlZCBtZW50YWwgaGVhbHRoIHN1cHBvcnQgd2l0aCBtb29kIHRyYWNraW5nIGFuZCBwZXJzb25hbGl6ZWQgaW50ZXJ2ZW50aW9ucycsXG4gICAgICAgIHNvdXJjZVVybDogJ2h0dHBzOi8vcHJvZHVjdGh1bnQuY29tL3Bvc3RzL21lbnRhbC1oZWFsdGgtYWknLFxuICAgICAgICBzb3VyY2VDb3VudHJ5OiAnVUsnLFxuICAgICAgICBvcmlnaW5hbElkZWE6ICdBSSBtZW50YWwgaGVhbHRoIGNvbXBhbmlvbiB3aXRoIDI0Lzcgc3VwcG9ydCcsXG4gICAgICAgIGNhdGVnb3J5OiAnSGVhbHRoJyxcbiAgICAgICAgdGFnczogWydBSScsICdNZW50YWwgSGVhbHRoJywgJ1dlbGxuZXNzJywgJ0hlYWx0aGNhcmUnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnTG9jYWwgRm9vZCBEZWxpdmVyeSBOZXR3b3JrJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdQbGF0Zm9ybSBjb25uZWN0aW5nIGxvY2FsIGZhcm1lcnMgd2l0aCBjb25zdW1lcnMgZm9yIGZyZXNoIHByb2R1Y2UgZGVsaXZlcnknLFxuICAgICAgICBzb3VyY2VVcmw6ICdodHRwczovL2NydW5jaGJhc2UuY29tL29yZ2FuaXphdGlvbi9mYXJtLWZyZXNoLWRlbGl2ZXJ5JyxcbiAgICAgICAgc291cmNlQ291bnRyeTogJ0NhbmFkYScsXG4gICAgICAgIG9yaWdpbmFsSWRlYTogJ0Zhcm0tdG8tdGFibGUgZGVsaXZlcnkgcGxhdGZvcm0nLFxuICAgICAgICBjYXRlZ29yeTogJ0Zvb2QnLFxuICAgICAgICB0YWdzOiBbJ0Zvb2QnLCAnTG9jYWwnLCAnU3VzdGFpbmFiaWxpdHknLCAnRGVsaXZlcnknXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnTGFuZ3VhZ2UgTGVhcm5pbmcgU29jaWFsIE5ldHdvcmsnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1NvY2lhbCBwbGF0Zm9ybSBmb3IgbGFuZ3VhZ2UgbGVhcm5lcnMgdG8gcHJhY3RpY2Ugd2l0aCBuYXRpdmUgc3BlYWtlcnMnLFxuICAgICAgICBzb3VyY2VVcmw6ICdodHRwczovL3R3aXR0ZXIuY29tL2xhbmdsZWFybmFwcCcsXG4gICAgICAgIHNvdXJjZUNvdW50cnk6ICdTcGFpbicsXG4gICAgICAgIG9yaWdpbmFsSWRlYTogJ1NvY2lhbCBsYW5ndWFnZSBsZWFybmluZyBwbGF0Zm9ybScsXG4gICAgICAgIGNhdGVnb3J5OiAnRWR1Y2F0aW9uJyxcbiAgICAgICAgdGFnczogWydFZHVjYXRpb24nLCAnTGFuZ3VhZ2UnLCAnU29jaWFsJywgJ0xlYXJuaW5nJ10sXG4gICAgICB9LFxuICAgIF07XG5cbiAgICAvLyBSZXR1cm4gcmFuZG9tIHN1YnNldCBvZiBtb2NrIGlkZWFzXG4gICAgcmV0dXJuIG1vY2tJZGVhcy5zbGljZSgwLCBNYXRoLm1pbihjb3VudCwgbW9ja0lkZWFzLmxlbmd0aCkpO1xuICB9XG5cbiAgLy8gUnVuIGRhaWx5IGlkZWEgZGlzY292ZXJ5IGFuZCBwcm9jZXNzaW5nXG4gIGFzeW5jIHJ1bkRhaWx5RGlzY292ZXJ5KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnNvbGUubG9nKCdSdW5uaW5nIGRhaWx5IGlkZWEgZGlzY292ZXJ5Li4uJyk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIERpc2NvdmVyIG5ldyBpZGVhc1xuICAgICAgY29uc3QgbmV3SWRlYXMgPSBhd2FpdCB0aGlzLmRpc2NvdmVySWRlYXMoNSk7XG4gICAgICBcbiAgICAgIC8vIFByb2Nlc3MgZWFjaCBpZGVhIHRocm91Z2ggdGhlIHN3YXJtXG4gICAgICBjb25zdCBwcm9jZXNzZWRJZGVhcyA9IGF3YWl0IHRoaXMuYmF0Y2hQcm9jZXNzSWRlYXMobmV3SWRlYXMpO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhgRGFpbHkgZGlzY292ZXJ5IGNvbXBsZXRlZC4gJHtwcm9jZXNzZWRJZGVhcy5sZW5ndGh9IGlkZWFzIHByb2Nlc3NlZC5gKTtcbiAgICAgIFxuICAgICAgLy8gTG9nIHN0YXRpc3RpY3NcbiAgICAgIGNvbnN0IGFwcHJvdmVkSWRlYXMgPSBwcm9jZXNzZWRJZGVhcy5maWx0ZXIoaWRlYSA9PiBpZGVhLnN0YXR1cyA9PT0gJ2FwcHJvdmVkJyk7XG4gICAgICBjb25zdCBmbGFnZ2VkSWRlYXMgPSBwcm9jZXNzZWRJZGVhcy5maWx0ZXIoaWRlYSA9PiBpZGVhLnN0YXR1cyA9PT0gJ2ZsYWdnZWQnKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYFJlc3VsdHM6ICR7YXBwcm92ZWRJZGVhcy5sZW5ndGh9IGFwcHJvdmVkLCAke2ZsYWdnZWRJZGVhcy5sZW5ndGh9IGZsYWdnZWQgZm9yIHJldmlld2ApO1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGRhaWx5IGRpc2NvdmVyeTonLCBlcnJvcik7XG4gICAgICBcbiAgICAgIC8vIFNlbmQgZXJyb3Igbm90aWZpY2F0aW9uXG4gICAgICBjb25zdCBub3RpZmljYXRpb246IFN3YXJtTm90aWZpY2F0aW9uID0ge1xuICAgICAgICBpZDogYGRhaWx5LWRpc2NvdmVyeS1lcnJvci0ke0RhdGUubm93KCl9YCxcbiAgICAgICAgdHlwZTogJ3N3YXJtX2Vycm9yJyxcbiAgICAgICAgdGl0bGU6ICdEYWlseSBEaXNjb3ZlcnkgRXJyb3InLFxuICAgICAgICBtZXNzYWdlOiBgRXJyb3IgaW4gZGFpbHkgaWRlYSBkaXNjb3Zlcnk6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCxcbiAgICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgICAgY2hhbm5lbHM6IHRoaXMuY29uZmlnLm5vdGlmaWNhdGlvbkNoYW5uZWxzLFxuICAgICAgICBpc1JlYWQ6IGZhbHNlLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuICAgICAgXG4gICAgICB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlLnB1c2gobm90aWZpY2F0aW9uKTtcbiAgICB9XG4gIH1cbn0gIl0sIm5hbWVzIjpbIk1hc3RlckFnZW50IiwiU3dhcm1NYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJpc1J1bm5pbmciLCJub3RpZmljYXRpb25RdWV1ZSIsIm1hc3RlckFnZW50IiwicGVyZm9ybWFuY2VNZXRyaWNzIiwiaW5pdGlhbGl6ZVBlcmZvcm1hbmNlTWV0cmljcyIsInRvdGFsSWRlYXNQcm9jZXNzZWQiLCJhdXRvQXBwcm92YWxSYXRlIiwiYXZlcmFnZUNvbmZpZGVuY2UiLCJhdmVyYWdlUHJvY2Vzc2luZ1RpbWUiLCJlcnJvclJhdGUiLCJhY3RpdmVBZ2VudHMiLCJxdWV1ZUxlbmd0aCIsImxhc3RVcGRhdGVkIiwiRGF0ZSIsInN0YXJ0IiwiY29uc29sZSIsImxvZyIsInN0YXJ0QmFja2dyb3VuZFByb2Nlc3NpbmciLCJzdGFydFBlcmZvcm1hbmNlTW9uaXRvcmluZyIsInN0b3AiLCJwcm9jZXNzSWRlYSIsImlkZWFEYXRhIiwidGFzayIsImlkIiwibm93IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwidHlwZSIsInN0YXR1cyIsInByaW9yaXR5IiwiaW5wdXQiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJ0aXRsZSIsImFkZFRhc2siLCJyZXN1bHQiLCJwcm9jZXNzVGFzayIsInVwZGF0ZVBlcmZvcm1hbmNlTWV0cmljcyIsInByb2Nlc3NlZElkZWEiLCJkZXNjcmlwdGlvbiIsInNvdXJjZVVybCIsInNvdXJjZUNvdW50cnkiLCJvcmlnaW5hbElkZWEiLCJrb3JlYW5BZGFwdGF0aW9uIiwib3V0cHV0IiwiZmVhc2liaWxpdHlTY29yZSIsIm92ZXJhbGxTY29yZSIsImNvbmZpZGVuY2VTY29yZSIsImNvbmZpZGVuY2UiLCJjYXRlZ29yeSIsInRhZ3MiLCJhdXRvQXBwcm92YWxUaHJlc2hvbGQiLCJwcm9jZXNzVXNlclF1ZXJ5IiwicXVlcnkiLCJzdWJzdHJpbmciLCJ1cGRhdGVkUXVlcnkiLCJyZXNwb25zZSIsInByb2Nlc3NpbmdUaW1lIiwiY29tcGxldGVkQXQiLCJnZXRUaW1lIiwidW5kZWZpbmVkIiwicmVzcG9uZGVkQXQiLCJtb2RlcmF0ZUNvbnRlbnQiLCJwb3N0IiwibW9kZXJhdGVkUG9zdCIsImlzQXBwcm9wcmlhdGUiLCJtb2RlcmF0ZWRBdCIsImJhdGNoUHJvY2Vzc0lkZWFzIiwiaWRlYXMiLCJsZW5ndGgiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsImlkZWEiLCJnZXRQZXJmb3JtYW5jZU1ldHJpY3MiLCJnZXROb3RpZmljYXRpb25zIiwibWFya05vdGlmaWNhdGlvbkFzUmVhZCIsIm5vdGlmaWNhdGlvbklkIiwibm90aWZpY2F0aW9uIiwiZmluZCIsIm4iLCJpc1JlYWQiLCJyZWFkQXQiLCJ1cGRhdGVDb25maWciLCJuZXdDb25maWciLCJnZXRTdGF0dXMiLCJnZXRUYXNrUXVldWUiLCJnZXRBZ2VudHMiLCJmaWx0ZXIiLCJhZ2VudCIsImlzQWN0aXZlIiwic2V0SW50ZXJ2YWwiLCJwcm9jZXNzUXVldWUiLCJxdWV1ZSIsImFnZW50cyIsImNhbGN1bGF0ZUF1dG9BcHByb3ZhbFJhdGUiLCJjYWxjdWxhdGVBdmVyYWdlQ29uZmlkZW5jZSIsImNhbGN1bGF0ZUF2ZXJhZ2VQcm9jZXNzaW5nVGltZSIsImNhbGN1bGF0ZUVycm9yUmF0ZSIsImRpc2NvdmVySWRlYXMiLCJjb3VudCIsIm1vY2tJZGVhcyIsInNsaWNlIiwibWluIiwicnVuRGFpbHlEaXNjb3ZlcnkiLCJuZXdJZGVhcyIsInByb2Nlc3NlZElkZWFzIiwiYXBwcm92ZWRJZGVhcyIsImZsYWdnZWRJZGVhcyIsImVycm9yIiwibWVzc2FnZSIsIkVycm9yIiwiY2hhbm5lbHMiLCJub3RpZmljYXRpb25DaGFubmVscyIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/swarm/SwarmManager.ts\n");

/***/ }),

/***/ "(rsc)/./src/swarm/agents/MasterAgent.ts":
/*!*****************************************!*\
  !*** ./src/swarm/agents/MasterAgent.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MasterAgent: () => (/* binding */ MasterAgent)\n/* harmony export */ });\n// Simplified imports for now - will be replaced with proper LangChain imports later\n// import { OpenAI } from '@langchain/openai';\n// import { PromptTemplate } from '@langchain/core/prompts';\n// import { LLMChain } from '@langchain/core/chains';\nclass MasterAgent {\n    constructor(config){\n        this.taskQueue = [];\n        this.isProcessing = false;\n        this.config = config;\n        this.agents = new Map();\n        this.initializeAgents();\n    }\n    initializeAgents() {\n        const agentDefinitions = [\n            {\n                id: \"master\",\n                type: \"master\",\n                name: \"Master Agent\",\n                description: \"Orchestrates task decomposition and coordination\",\n                capabilities: [\n                    \"task_decomposition\",\n                    \"coordination\",\n                    \"workflow_management\"\n                ],\n                isActive: true,\n                lastActive: new Date(),\n                performanceMetrics: {\n                    totalTasks: 0,\n                    successfulTasks: 0,\n                    averageConfidence: 0,\n                    averageProcessingTime: 0,\n                    errorRate: 0\n                }\n            },\n            {\n                id: \"sourcing\",\n                type: \"sourcing\",\n                name: \"Sourcing Agent\",\n                description: \"Discovers innovative ideas from global platforms\",\n                capabilities: [\n                    \"web_scraping\",\n                    \"api_integration\",\n                    \"content_extraction\"\n                ],\n                isActive: true,\n                lastActive: new Date(),\n                performanceMetrics: {\n                    totalTasks: 0,\n                    successfulTasks: 0,\n                    averageConfidence: 0,\n                    averageProcessingTime: 0,\n                    errorRate: 0\n                }\n            },\n            {\n                id: \"scoring\",\n                type: \"scoring\",\n                name: \"Scoring Agent\",\n                description: \"Evaluates Korea feasibility and market fit\",\n                capabilities: [\n                    \"market_analysis\",\n                    \"cultural_assessment\",\n                    \"regulatory_compliance\"\n                ],\n                isActive: true,\n                lastActive: new Date(),\n                performanceMetrics: {\n                    totalTasks: 0,\n                    successfulTasks: 0,\n                    averageConfidence: 0,\n                    averageProcessingTime: 0,\n                    errorRate: 0\n                }\n            },\n            {\n                id: \"adaptation\",\n                type: \"adaptation\",\n                name: \"Adaptation Agent\",\n                description: \"Generates Korean market adaptations\",\n                capabilities: [\n                    \"localization\",\n                    \"cultural_modification\",\n                    \"integration_suggestions\"\n                ],\n                isActive: true,\n                lastActive: new Date(),\n                performanceMetrics: {\n                    totalTasks: 0,\n                    successfulTasks: 0,\n                    averageConfidence: 0,\n                    averageProcessingTime: 0,\n                    errorRate: 0\n                }\n            },\n            {\n                id: \"moderation\",\n                type: \"moderation\",\n                name: \"Moderation Agent\",\n                description: \"Handles community content and spam filtering\",\n                capabilities: [\n                    \"content_moderation\",\n                    \"spam_detection\",\n                    \"quality_assessment\"\n                ],\n                isActive: true,\n                lastActive: new Date(),\n                performanceMetrics: {\n                    totalTasks: 0,\n                    successfulTasks: 0,\n                    averageConfidence: 0,\n                    averageProcessingTime: 0,\n                    errorRate: 0\n                }\n            }\n        ];\n        agentDefinitions.forEach((agent)=>{\n            this.agents.set(agent.id, agent);\n        });\n    }\n    async processTask(task) {\n        const startTime = Date.now();\n        try {\n            console.log(`Master Agent: Processing task ${task.id} of type ${task.type}`);\n            // Update task status\n            task.status = \"processing\";\n            task.assignedAgent = \"master\";\n            task.updatedAt = new Date();\n            // Decompose task based on type\n            const subtasks = await this.decomposeTask(task);\n            // Execute subtasks in parallel where possible\n            const results = await this.executeSubtasks(subtasks);\n            // Aggregate results\n            const aggregatedResult = await this.aggregateResults(results);\n            // Determine confidence and approval status\n            const confidence = this.calculateConfidence(aggregatedResult);\n            const shouldAutoApprove = confidence >= this.config.autoApprovalThreshold;\n            // Update task with results\n            task.output = aggregatedResult;\n            task.confidence = confidence;\n            task.status = shouldAutoApprove ? \"completed\" : \"pending\";\n            task.completedAt = new Date();\n            // Log the task execution\n            await this.logTaskExecution(task, Date.now() - startTime);\n            // Handle approval workflow\n            if (!shouldAutoApprove) {\n                await this.flagForReview(task);\n            }\n            console.log(`Master Agent: Task ${task.id} completed with confidence ${confidence}`);\n            return task;\n        } catch (error) {\n            console.error(`Master Agent: Error processing task ${task.id}:`, error);\n            task.status = \"failed\";\n            task.error = error instanceof Error ? error.message : \"Unknown error\";\n            task.updatedAt = new Date();\n            await this.handleError(task, error);\n            return task;\n        }\n    }\n    async decomposeTask(task) {\n        // Simplified task decomposition without LangChain\n        const subtasks = [];\n        if (task.type === \"idea_processing\") {\n            // Create subtasks for idea processing workflow\n            subtasks.push({\n                id: `${task.id}-subtask-0`,\n                type: \"sourcing\",\n                status: \"pending\",\n                priority: \"medium\",\n                input: task.input,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            });\n            subtasks.push({\n                id: `${task.id}-subtask-1`,\n                type: \"scoring\",\n                status: \"pending\",\n                priority: \"medium\",\n                input: task.input,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            });\n            subtasks.push({\n                id: `${task.id}-subtask-2`,\n                type: \"adaptation\",\n                status: \"pending\",\n                priority: \"medium\",\n                input: task.input,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            });\n        }\n        return subtasks;\n    }\n    async executeSubtasks(subtasks) {\n        const results = [];\n        // Execute subtasks in parallel where possible\n        const executionPromises = subtasks.map(async (subtask)=>{\n            try {\n                // Simulate agent execution (in real implementation, this would call actual agents)\n                const result = await this.simulateAgentExecution(subtask);\n                return result;\n            } catch (error) {\n                console.error(`Error executing subtask ${subtask.id}:`, error);\n                return {\n                    error: error instanceof Error ? error.message : \"Unknown error\"\n                };\n            }\n        });\n        const subtaskResults = await Promise.all(executionPromises);\n        results.push(...subtaskResults);\n        return results;\n    }\n    async simulateAgentExecution(subtask) {\n        // Simulate processing time\n        await new Promise((resolve)=>setTimeout(resolve, Math.random() * 2000 + 500));\n        // Simulate different agent behaviors based on type\n        const agentType = this.determineAgentType(subtask);\n        switch(agentType){\n            case \"sourcing\":\n                return {\n                    agentType: \"sourcing\",\n                    result: {\n                        discoveredIdeas: [\n                            {\n                                title: \"AI-Powered Language Learning App\",\n                                description: \"Personalized language learning using AI\",\n                                source: \"US\",\n                                url: \"https://example.com/idea1\"\n                            }\n                        ],\n                        confidence: 0.85\n                    }\n                };\n            case \"scoring\":\n                return {\n                    agentType: \"scoring\",\n                    result: {\n                        feasibilityScore: 8.5,\n                        culturalFit: 9,\n                        regulatoryCompliance: 8,\n                        marketSize: 7,\n                        competitionLevel: 6,\n                        reasoning: \"High potential due to Korea's strong education market and tech adoption\",\n                        confidence: 0.88\n                    }\n                };\n            case \"adaptation\":\n                return {\n                    agentType: \"adaptation\",\n                    result: {\n                        koreanAdaptation: \"AI-powered Korean language learning app with KakaoTalk integration\",\n                        keyChanges: [\n                            \"KakaoTalk integration\",\n                            \"Korean cultural content\",\n                            \"Local payment systems\"\n                        ],\n                        confidence: 0.92\n                    }\n                };\n            case \"moderation\":\n                return {\n                    agentType: \"moderation\",\n                    result: {\n                        isAppropriate: true,\n                        qualityScore: 8.5,\n                        confidence: 0.90\n                    }\n                };\n            default:\n                return {\n                    agentType: \"unknown\",\n                    result: {\n                        confidence: 0.5\n                    }\n                };\n        }\n    }\n    determineAgentType(subtask) {\n        // Simple heuristic to determine agent type based on input\n        const input = JSON.stringify(subtask.input).toLowerCase();\n        if (input.includes(\"source\") || input.includes(\"discover\") || input.includes(\"find\")) {\n            return \"sourcing\";\n        } else if (input.includes(\"score\") || input.includes(\"feasibility\") || input.includes(\"market\")) {\n            return \"scoring\";\n        } else if (input.includes(\"adapt\") || input.includes(\"korean\") || input.includes(\"localize\")) {\n            return \"adaptation\";\n        } else if (input.includes(\"moderate\") || input.includes(\"content\") || input.includes(\"quality\")) {\n            return \"moderation\";\n        }\n        return \"scoring\"; // Default fallback\n    }\n    async aggregateResults(results) {\n        const aggregationPrompt = PromptTemplate.fromTemplate(`\n      You are aggregating results from multiple AI agents for Ideaoasis.co.kr.\n      \n      Agent Results: {results}\n      \n      Aggregate these results into a comprehensive analysis that includes:\n      1. Overall feasibility score (1-10)\n      2. Korean market adaptation\n      3. Key opportunities and risks\n      4. Implementation recommendations\n      5. Overall confidence level\n      \n      Return a JSON object with this structure.\n    `);\n        const chain = new LLMChain({\n            llm: this.llm,\n            prompt: aggregationPrompt\n        });\n        const response = await chain.call({\n            results: JSON.stringify(results)\n        });\n        try {\n            return JSON.parse(response.text);\n        } catch (error) {\n            console.error(\"Error parsing aggregated results:\", error);\n            return {\n                overallScore: 7.5,\n                koreanAdaptation: \"Standard adaptation\",\n                confidence: 0.75,\n                error: \"Failed to parse aggregated results\"\n            };\n        }\n    }\n    calculateConfidence(result) {\n        // Calculate confidence based on various factors\n        const factors = [\n            result.confidence || 0.5,\n            result.overallScore ? result.overallScore / 10 : 0.5,\n            result.qualityScore ? result.qualityScore / 10 : 0.5\n        ];\n        return factors.reduce((sum, factor)=>sum + factor, 0) / factors.length;\n    }\n    async flagForReview(task) {\n        const notification = {\n            id: `notification-${Date.now()}`,\n            type: \"review_required\",\n            title: \"Low Confidence Idea Requires Review\",\n            message: `Task ${task.id} has confidence ${task.confidence} (below threshold ${this.config.autoApprovalThreshold})`,\n            priority: \"high\",\n            channels: this.config.notificationChannels,\n            isRead: false,\n            createdAt: new Date()\n        };\n        console.log(`Flagging task ${task.id} for review with confidence ${task.confidence}`);\n    // In real implementation, this would send notifications\n    // await this.sendNotification(notification);\n    }\n    async logTaskExecution(task, processingTime) {\n        const log = {\n            id: `log-${Date.now()}`,\n            agentType: \"master\",\n            taskId: task.id,\n            inputData: task.input,\n            outputData: task.output,\n            confidenceScore: task.confidence,\n            processingTimeMs: processingTime,\n            createdAt: new Date()\n        };\n        console.log(`Task execution logged: ${log.id}`);\n    // In real implementation, this would save to database\n    // await this.saveLog(log);\n    }\n    async handleError(task, error) {\n        const notification = {\n            id: `error-${Date.now()}`,\n            type: \"swarm_error\",\n            title: \"Swarm Processing Error\",\n            message: `Task ${task.id} failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n            priority: \"urgent\",\n            channels: this.config.notificationChannels,\n            isRead: false,\n            createdAt: new Date()\n        };\n        console.error(`Handling error for task ${task.id}:`, error);\n    // In real implementation, this would send notifications\n    // await this.sendNotification(notification);\n    }\n    // Public methods for swarm management\n    getAgents() {\n        return Array.from(this.agents.values());\n    }\n    getTaskQueue() {\n        return this.taskQueue;\n    }\n    async addTask(task) {\n        this.taskQueue.push(task);\n        console.log(`Added task ${task.id} to queue. Queue length: ${this.taskQueue.length}`);\n    }\n    async processQueue() {\n        if (this.isProcessing || this.taskQueue.length === 0) {\n            return;\n        }\n        this.isProcessing = true;\n        try {\n            const batch = this.taskQueue.splice(0, this.config.batchSize);\n            console.log(`Processing batch of ${batch.length} tasks`);\n            const results = await Promise.all(batch.map((task)=>this.processTask(task)));\n            console.log(`Completed processing ${results.length} tasks`);\n        } catch (error) {\n            console.error(\"Error processing queue:\", error);\n        } finally{\n            this.isProcessing = false;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/swarm/agents/MasterAgent.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendors"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fswarm%2Fstatus%2Froute&page=%2Fapi%2Fswarm%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fswarm%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fyeojooncho%2FIdeaOasis-3%2Fideaoasis-3%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyeojooncho%2FIdeaOasis-3%2Fideaoasis-3&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();